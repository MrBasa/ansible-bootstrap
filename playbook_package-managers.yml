# playbook_package-managers.yml
# Installs packages using various package managers.
# playbook_package-managers.yml - Now a tasks file
- name: "Initialize package variables and results tracker"
  set_fact:
    pip_packages: "{{ pip_packages | default([]) }}"
    cargo_packages: "{{ cargo_packages | default([]) }}"
    npm_packages: "{{ npm_packages | default([]) }}"
    flatpak_packages: "{{ flatpak_packages | default([]) }}"
    os_packages_common: "{{ os_packages_common | default([]) }}"
    os_packages_debian: "{{ os_packages_debian | default([]) }}"
    os_packages_fedora: "{{ os_packages_fedora | default([]) }}"
    os_packages_arch: "{{ os_packages_arch | default([]) }}"
    aur_packages: "{{ aur_packages | default([]) }}"
    installation_results: []

- name: "Display package installation plan"
  debug:
    msg: |
      Installation Summary:
      OS Packages (Common): {{ os_packages_common | length }}
      OS Packages (Debian): {{ os_packages_debian | length }}
      OS Packages (Fedora): {{ os_packages_fedora | length }} 
      OS Packages (Arch): {{ os_packages_arch | length }}
      PIP Packages: {{ pip_packages | length }}
      Cargo Packages: {{ cargo_packages | length }}
      NPM Packages: {{ npm_packages | length }}
      AUR Packages: {{ aur_packages | length }}
      Flatpak Packages: {{ flatpak_packages | length }}

# --- OS Package Installation ---
- name: "Install OS packages based on distribution"
  block:
    - name: "Install common OS packages (Debian)"
      when: ansible_os_family == "Debian" and os_packages_common | length > 0
      become: yes
      apt:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ os_packages_common }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "Install Debian-specific OS packages"
      when: ansible_os_family == "Debian" and os_packages_debian | length > 0
      become: yes
      apt:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ os_packages_debian }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "Install Fedora-specific OS packages"
      when: ansible_os_family == "RedHat" and os_packages_fedora | length > 0
      become: yes
      dnf:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ os_packages_fedora }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "Install Arch-specific OS packages"
      when: ansible_os_family == "Archlinux" and os_packages_arch | length > 0
      become: yes
      pacman:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ os_packages_arch }}"
      loop_control:
        label: "{{ item.name }}"
  
  rescue:
    - name: "Record OS package installation failure"
      set_fact:
        installation_results: "{{ installation_results + [{'name': ansible_failed_result.item.name, 'package': ansible_failed_result.item.package_name, 'installer': 'os', 'status': 'FAILED', 'error': ansible_failed_result.msg}] }}"
      when: ansible_failed_result is defined
    
    - name: "Display immediate failure notification"
      debug:
        msg: "Failed to install {{ ansible_failed_result.item.name }} ({{ ansible_failed_result.item.package_name }}) - {{ ansible_failed_result.msg }}"
      when: ansible_failed_result is defined
    
    - name: "Continue despite package failures"
      debug:
        msg: "Continuing with other packages..."

# --- AUR Package Installation ---
- name: "Install AUR packages (Arch only)"
  when: ansible_os_family == "Archlinux" and aur_packages | length > 0
  block:
    - name: "Install AUR packages"
      become: yes
      become_user: aur_builder
      kewlfft.aur.aur:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ aur_packages }}"
      loop_control:
        label: "{{ item.name }}"
      environment:
        HOME: "/home/aur_builder"
  
  rescue:
    - name: "Record AUR package installation failure"
      set_fact:
        installation_results: "{{ installation_results + [{'name': ansible_failed_result.item.name, 'package': ansible_failed_result.item.package_name, 'installer': 'aur', 'status': 'FAILED', 'error': ansible_failed_result.msg}] }}"
    
    - name: "Display AUR failure notification"
      debug:
        msg: "Failed to install {{ ansible_failed_result.item.name }} ({{ ansible_failed_result.item.package_name }) via AUR - {{ ansible_failed_result.msg }}"

# --- PIP Package Installation ---
- name: "Install pip packages"
  when: pip_packages | length > 0
  block:
    - name: "Check if pip is available"
      command: which pip3 || which pip
      register: pip_check
      changed_when: false
      ignore_errors: yes

    - name: "Install pip packages"
      when: pip_check.rc == 0
      become: yes
      pip:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ pip_packages }}"
      loop_control:
        label: "{{ item.name }}"
  
  rescue:
    - name: "Record pip package installation failure"
      set_fact:
        installation_results: "{{ installation_results + [{'name': ansible_failed_result.item.name, 'package': ansible_failed_result.item.package_name, 'installer': 'pip', 'status': 'FAILED', 'error': ansible_failed_result.msg}] }}"
    
    - name: "Display pip failure notification"
      debug:
        msg: "Failed to install {{ ansible_failed_result.item.name }} ({{ ansible_failed_result.item.package_name }) via pip - {{ ansible_failed_result.msg }}"
    
    - name: "Warn if pip is not available"
      when: pip_check.rc != 0
      debug:
        msg: "pip is not available but pip packages were requested"

# --- Add similar blocks for cargo, npm, flatpak here ---
# Pattern follows the same structure as above

# --- Installation Summary ---
- name: "Display installation completion summary"
  debug:
    msg: |
      Package installation completed!
      
      {{ installation_results | length }} packages had issues during installation.
      
      Note about Language Servers and Kate:
      Most language servers installed in the 'language-servers' group should work with Kate
      when you install the 'LSP Client' plugin in Kate's settings.

- name: "Display detailed failure report"
  when: installation_results | length > 0
  debug:
    msg: |
      Failed installations:
      {% for result in installation_results %}
      - {{ result.name }} ({{ result.package }}) via {{ result.installer }}: {{ result.error }}
      {% endfor %}
