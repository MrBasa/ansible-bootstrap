# playbook_package-managers.yml
# Installs packages using various package managers.
- name: "Initialize package variables and results tracker"
  set_fact:
    pip_packages: "{{ pip_packages | default([]) }}"
    cargo_packages: "{{ cargo_packages | default([]) }}"
    npm_packages: "{{ npm_packages | default([]) }}"
    flatpak_packages: "{{ flatpak_packages | default([]) }}"
    os_packages_common: "{{ os_packages_common | default([]) }}"
    os_packages_debian: "{{ os_packages_debian | default([]) }}"
    os_packages_fedora: "{{ os_packages_fedora | default([]) }}"
    os_packages_arch: "{{ os_packages_arch | default([]) }}"
    aur_packages: "{{ aur_packages | default([]) }}"
    failed_installations: []

# --- Package Manager Setup (HARD FAILURES) ---
- name: "Ensure package managers are available"
  block:
    - name: "Check pip availability"
      when: pip_packages | length > 0
      command: which pip3 || which pip
      register: pip_check
      changed_when: false
      failed_when: pip_check.rc != 0

    - name: "Check npm availability"
      when: npm_packages | length > 0
      command: which npm
      register: npm_check
      changed_when: false
      failed_when: npm_check.rc != 0

    - name: "Check cargo availability or install it"
      when: cargo_packages | length > 0
      block:
        - name: "Check if cargo is available"
          command: which cargo
          register: cargo_check
          changed_when: false
          ignore_errors: yes

        - name: "Install cargo if missing"
          when: cargo_check.rc != 0
          become: yes
          shell: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          args:
            creates: "{{ ansible_env.HOME }}/.cargo/bin/cargo"

    - name: "Setup Flatpak for Flathub"
      when: flatpak_packages | length > 0
      block:
        - name: "Ensure Flatpak is installed"
          become: yes
          package:
            name: flatpak
            state: present

        - name: "Add Flathub repository"
          become: yes
          command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          args:
            creates: "/var/lib/flatpak/repo/flathub.flatpakrepo"

# --- Package Installation (CONTINUE ON INDIVIDUAL FAILURES) ---
- name: "Install all packages"
  block:
    # OS Packages
    - name: "Install common OS packages"
      when: ansible_os_family == "Debian" and os_packages_common | length > 0
      become: yes
      apt:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ os_packages_common }}"
      loop_control:
        label: "Installing OS package: {{ item.name }} - {{ item.package_name }}"

    - name: "Install Debian-specific OS packages"
      when: ansible_os_family == "Debian" and os_packages_debian | length > 0
      become: yes
      apt:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ os_packages_debian }}"
      loop_control:
        label: "Installing OS package: {{ item.name }} - {{ item.package_name }}"

    - name: "Install Fedora-specific OS packages"
      when: ansible_os_family == "RedHat" and os_packages_fedora | length > 0
      become: yes
      dnf:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ os_packages_fedora }}"
      loop_control:
        label: "Installing OS package: {{ item.name }} - {{ item.package_name }}"

    - name: "Install Arch-specific OS packages"
      when: ansible_os_family == "Archlinux" and os_packages_arch | length > 0
      become: yes
      package:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ os_packages_arch }}"
      loop_control:
        label: "Installing OS package: {{ item.name }} - {{ item.package_name }}"

    # AUR Packages
    - name: "Install AUR packages"
      when: ansible_os_family == "Archlinux" and aur_packages | length > 0
      become: yes
      become_user: aur_builder
      kewlfft.aur.aur:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ aur_packages }}"
      loop_control:
        label: "Installing AUR package: {{ item.name }} - {{ item.package_name }}"
      environment:
        HOME: "/home/aur_builder"

    # PIP Packages
    - name: "Install pip packages"
      when: pip_packages | length > 0 and pip_check.rc == 0
      become: yes
      pip:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ pip_packages }}"
      loop_control:
        label: "Installing PIP package: {{ item.name }} - {{ item.package_name }}"

    # Cargo Packages
    - name: "Install cargo packages"
      when: cargo_packages | length > 0
      become: yes
      community.general.cargo:
        name: "{{ item.package_name }}"
        state: present
      loop: "{{ cargo_packages }}"
      loop_control:
        label: "Installing Cargo package: {{ item.name }} - {{ item.package_name }}"

    # NPM Packages
    - name: "Install npm packages"
      when: npm_packages | length > 0 and npm_check.rc == 0
      become: yes
      npm:
        name: "{{ item.package_name }}"
        state: present
        global: yes
      loop: "{{ npm_packages }}"
      loop_control:
        label: "Installing NPM package: {{ item.name }} - {{ item.package_name }}"

    # Flatpak Packages
    - name: "Install flatpak packages"
      when: flatpak_packages | length > 0
      become: yes
      community.general.flatpak:
        name: "{{ item.package_name }}"
        state: present
        method: system
      loop: "{{ flatpak_packages }}"
      loop_control:
        label: "Installing Flatpak package: {{ item.name }} - {{ item.package_name }}"

  rescue:
    - name: "Record package failure"
      set_fact:
        failed_installations: "{{ failed_installations + [ansible_failed_result] }}"

    - name: "Log failure to file"
      lineinfile:
        path: "/tmp/ansible_package_failures.log"
        line: "FAILED | {{ ansible_date_time.iso8601 }} | {{ ansible_failed_result.item.name }} ({{ ansible_failed_result.item.package_name }}) | {{ ansible_failed_result.msg }}"
        create: yes

    - name: "Continue with next package"
      debug:
        msg: "Failed to install {{ ansible_failed_result.item.name }} - continuing..."

# --- Final Summary ---
- name: "Display installation completion"
  debug:
    msg: "Package installation completed!"

- name: "Display failed installations summary"
  when: failed_installations | length > 0
  debug:
    msg: "{{ failed_installations | length }} packages failed to install:"

- name: "Display individual failed packages"
  when: failed_installations | length > 0
  debug:
    msg: "  - {{ item.item.name }} ({{ item.item.package_name }}): {{ item.msg }}"
  loop: "{{ failed_installations }}"
