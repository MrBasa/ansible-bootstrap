# playbook_dev-tools.yml
- name: "Include Ansible Dependencies"
  import_playbook: playbook_ansible-dependencies.yml

- name: "Bootstrap Development Environment"
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    # Default to only common-dev-tools and language-servers
    selected_groups: "{{ ['common-dev-tools', 'language-servers'] + (languages | default([])) + (databases | default([])) + (containers | default([])) + (infrastructure | default([])) + (linters | default([])) }}"

  tasks:
    - name: "Load package configuration"
      include_vars:
        file: config_dev-tools.yml
        name: config

    - name: "Display installation plan"
      debug:
        msg: |
          Installing package groups: {{ selected_groups | join(', ') }}
          Available groups:
          {% for group in config.package_groups %}
          - {{ group.group_name }}: {{ group.group_description }}
          {% endfor %}
    - name: "Validate selected groups exist in configuration"
      fail:
        msg: "Package group '{{ item }}' not found in configuration. Available groups: {{ config.package_groups | map(attribute='group_name') | list | join(', ') }}"
      when: item not in config.package_groups | map(attribute='group_name') | list
      loop: "{{ selected_groups }}"

    # --- Extract packages from selected groups ---
    - name: "Extract packages from selected groups"
      set_fact:
        all_packages: "{{ all_packages | default([]) + item.packages }}"
      loop: "{{ config.package_groups | selectattr('group_name', 'in', selected_groups) | list }}"

    # --- Display package details ---
    - name: "Display package installation details"
      debug:
        msg: |
          Installing: {{ item.name }}
          Package: {{ item.package_name }}
          Description: {{ item.description }}
          Installer: {{ item.installer }}
      loop: "{{ all_packages }}"
      loop_control:
        label: "{{ item.name }}"

    # --- Separate packages by installer and handle OS-specific names ---
    - name: "Separate OS packages by distribution with OS-specific names"
      set_fact:
        os_packages_common: "{{ os_packages_common | default([]) + [item] }}"
      loop: "{{ all_packages }}"
      when: item.installer == 'os'

    - name: "Process OS-specific package names for Debian"
      set_fact:
        os_packages_debian: "{{ os_packages_debian | default([]) + [item | combine({'package_name': item.os_specific.Debian})] if item.os_specific and item.os_specific.Debian is defined else [item] }}"
      loop: "{{ all_packages }}"
      when: item.installer == 'os' and ansible_os_family == 'Debian'

    - name: "Process OS-specific package names for Fedora"
      set_fact:
        os_packages_fedora: "{{ os_packages_fedora | default([]) + [item | combine({'package_name': item.os_specific.Fedora})] if item.os_specific and item.os_specific.Fedora is defined else [item] }}"
      loop: "{{ all_packages }}"
      when: item.installer == 'os' and ansible_os_family == 'Fedora'

    - name: "Process OS-specific package names for Arch"
      set_fact:
        os_packages_arch: "{{ os_packages_arch | default([]) + [item | combine({'package_name': item.os_specific.Archlinux})] if item.os_specific and item.os_specific.Archlinux is defined else [item] }}"
      loop: "{{ all_packages }}"
      when: item.installer == 'os' and ansible_os_family == 'Archlinux'

    - name: "Separate pip packages"
      set_fact:
        pip_packages: "{{ pip_packages | default([]) + [item] }}"
      loop: "{{ all_packages }}"
      when: item.installer == 'pip'

    - name: "Separate cargo packages"
      set_fact:
        cargo_packages: "{{ cargo_packages | default([]) + [item] }}"
      loop: "{{ all_packages }}"
      when: item.installer == 'cargo'

    - name: "Separate npm packages"
      set_fact:
        npm_packages: "{{ npm_packages | default([]) + [item] }}"
      loop: "{{ all_packages }}"
      when: item.installer == 'npm'

    # --- Install packages using package managers ---
    - name: "Include package managers playbook"
      import_playbook: playbook_package-managers.yml
      vars:
        os_packages_common: "{{ os_packages_common | default([]) }}"
        os_packages_debian: "{{ os_packages_debian | default([]) }}"
        os_packages_fedora: "{{ os_packages_fedora | default([]) }}"
        os_packages_arch: "{{ os_packages_arch | default([]) }}"
        pip_packages: "{{ pip_packages | default([]) }}"
        cargo_packages: "{{ cargo_packages | default([]) }}"
        npm_packages: "{{ npm_packages | default([]) }}"

    # --- Post-installation setup ---
    - name: "Create development directories"
      become: yes
      become_user: "{{ ansible_user_id }}"
      file:
        path: "/home/{{ ansible_user_id }}/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - dev
        - dev/go
        - dev/rust
        - dev/python
        - dev/js
        - dev/docker
        - dev/databases
      environment:
        HOME: "/home/{{ ansible_user_id }}"

    - name: "Install VS Code extensions"
      when: "'common-dev-tools' in selected_groups"
      become: yes
      become_user: "{{ ansible_user_id }}"
      shell:
        cmd: "codium --install-extension {{ item }}"
      loop:
        - ms-python.python
        - golang.Go
        - rust-lang.rust-analyzer
        - ms-dotnettools.csharp
        - ms-vscode.vscode-typescript-next
        - bradlc.vscode-tailwindcss
        - eamodio.gitlens
        - ms-vscode.cpptools
        - ms-azuretools.vscode-docker
        - hashicorp.terraform
        - redhat.vscode-yaml
        - ms-vscode.makefile-tools
        - streetsidesoftware.code-spell-checker
      environment:
        HOME: "/home/{{ ansible_user_id }}"
      ignore_errors: yes

    - name: "Configure Git for development"
      become: yes
      become_user: "{{ ansible_user_id }}"
      git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: global
      loop:
        - { name: "user.name", value: "{{ ansible_user_id }}" }
        - { name: "user.email", value: "{{ ansible_user_id }}@localhost" }
        - { name: "init.defaultBranch", value: "main" }
        - { name: "pull.rebase", value: "false" }
        - { name: "core.editor", value: "micro" }
      environment:
        HOME: "/home/{{ ansible_user_id }}"

    - name: "Display Kate LSP configuration note"
      when: "'language-servers' in selected_groups"
      debug:
        msg: |
          Language servers have been installed! To use them with Kate:
          
          1. Open Kate
          2. Go to Settings → Configure Kate → Plugins
          3. Enable "LSP Client" plugin
          4. Restart Kate
          5. Go to Settings → Configure Kate → LSP Client
          6. The installed language servers should auto-configure for supported file types

    - name: "Display completion message"
      debug:
        msg: |
          Development environment setup completed!

          Installed groups: {{ selected_groups | join(', ') }}
          
          Language servers are ready for editors like Kate (see note above).

# config_dev-tools.yml
packages:
  # Core Development Tools (for common-dev-tools group)
  git:
    name: "Git"
    package_name: "git"
    description: "Distributed version control system"
    installer: "os"

  make:
    name: "GNU Make"
    package_name: "make"
    description: "Build automation tool"
    installer: "os"

  cmake:
    name: "CMake"
    package_name: "cmake"
    description: "Cross-platform build system generator"
    installer: "os"

  gcc:
    name: "GCC"
    package_name: "gcc"
    description: "GNU Compiler Collection"
    installer: "os"

  clang:
    name: "Clang"
    package_name: "clang"
    description: "C language family frontend for LLVM"
    installer: "os"

  llvm:
    name: "LLVM"
    package_name: "llvm"
    description: "Collection of modular and reusable compiler and toolchain technologies"
    installer: "os"

  pkg_config:
    name: "pkg-config"
    package_name: "pkg-config"
    description: "Helper tool used when compiling applications and libraries"
    installer: "os"

  # Editors & IDEs
  vscodium:
    name: "VSCodium"
    package_name: "vscodium"
    description: "Free/Libre Open Source Software Binaries of VSCode"
    installer: "os"
    os_specific:
      Debian: "codium"
      RedHat: "codium"
      Archlinux: "vscodium-bin"

  neovim:
    name: "Neovim"
    package_name: "neovim"
    description: "Vim-fork focused on extensibility and usability"
    installer: "os"

  helix:
    name: "Helix Editor"
    package_name: "helix"
    description: "Post-modern modal text editor"
    installer: "os"

  # Language Servers & Linters
  clangd:
    name: "Clangd"
    package_name: "clangd"
    description: "LLVM LSP-based C/C++ language server"
    installer: "os"

  rust_analyzer:
    name: "Rust Analyzer"
    package_name: "rust-analyzer"
    description: "Rust language server for IDE features"
    installer: "os"

  gopls:
    name: "Go Language Server"
    package_name: "gopls"
    description: "Official Go language server"
    installer: "os"

  python_lsp_server:
    name: "Python LSP Server"
    package_name: "python-lsp-server"
    description: "Python language server for the Language Server Protocol"
    installer: "pip"

  typescript_language_server:
    name: "TypeScript Language Server"
    package_name: "typescript-language-server"
    description: "TypeScript & JavaScript language server"
    installer: "npm"

  eslint:
    name: "ESLint"
    package_name: "eslint"
    description: "JavaScript/TypeScript linting utility"
    installer: "npm"

  prettier:
    name: "Prettier"
    package_name: "prettier"
    description: "Code formatter for JavaScript/TypeScript"
    installer: "npm"

  # Container Tools - Podman Group
  podman:
    name: "Podman"
    package_name: "podman"
    description: "Daemonless container engine for developing, managing, and running OCI containers"
    installer: "os"

  buildah:
    name: "Buildah"
    package_name: "buildah"
    description: "Tool for building OCI container images"
    installer: "os"

  skopeo:
    name: "Skopeo"
    package_name: "skopeo"
    description: "Tool for working with container images and image repositories"
    installer: "os"

  # Container Tools - Docker Group
  docker:
    name: "Docker"
    package_name: "docker"
    description: "Platform for developing, shipping, and running applications in containers"
    installer: "os"

  docker_compose:
    name: "Docker Compose"
    package_name: "docker-compose"
    description: "Tool for defining and running multi-container Docker applications"
    installer: "os"

  # Infrastructure & Cloud
  kubectl:
    name: "Kubectl"
    package_name: "kubectl"
    description: "Kubernetes command-line tool"
    installer: "os"

  helm:
    name: "Helm"
    package_name: "helm"
    description: "Kubernetes package manager"
    installer: "os"

  terraform:
    name: "Terraform"
    package_name: "terraform"
    description: "Infrastructure as Code tool"
    installer: "os"

  # Python Development
  python3:
    name: "Python 3"
    package_name: "python3"
    description: "Python programming language interpreter"
    installer: "os"

  python_pip:
    name: "Python Pip"
    package_name: "python3-pip"
    description: "Python package installer"
    installer: "os"

  python_venv:
    name: "Python Virtual Environment"
    package_name: "python3-venv"
    description: "Python virtual environment support"
    installer: "os"

  python_dev:
    name: "Python Development Headers"
    package_name: "python3-dev"
    description: "Header files and static library for Python"
    installer: "os"

  black:
    name: "Black"
    package_name: "black"
    description: "Python code formatter"
    installer: "pip"

  flake8:
    name: "Flake8"
    package_name: "flake8"
    description: "Python style guide enforcement"
    installer: "pip"

  mypy:
    name: "Mypy"
    package_name: "mypy"
    description: "Optional static typing for Python"
    installer: "pip"

  pytest:
    name: "Pytest"
    package_name: "pytest"
    description: "Python testing framework"
    installer: "pip"

  # Go Development
  go:
    name: "Go"
    package_name: "go"
    description: "Go programming language compiler"
    installer: "os"

  delve:
    name: "Delve"
    package_name: "delve"
    description: "Go debugger"
    installer: "os"

  # Rust Development
  rustup:
    name: "Rustup"
    package_name: "rustup"
    description: "Rust toolchain installer"
    installer: "os"

  cargo:
    name: "Cargo"
    package_name: "cargo"
    description: "Rust package manager"
    installer: "os"

  # Node.js Development
  nodejs:
    name: "Node.js"
    package_name: "nodejs"
    description: "JavaScript runtime built on Chrome's V8 engine"
    installer: "os"

  npm:
    name: "NPM"
    package_name: "npm"
    description: "Node.js package manager"
    installer: "os"

  typescript:
    name: "TypeScript"
    package_name: "typescript"
    description: "Typed superset of JavaScript"
    installer: "npm"

  # Database - PostgreSQL
  postgresql:
    name: "PostgreSQL"
    package_name: "postgresql"
    description: "Advanced open source relational database"
    installer: "os"

  postgresql_client:
    name: "PostgreSQL Client"
    package_name: "postgresql-client"
    description: "PostgreSQL database client"
    installer: "os"

  # Database - Redis
  redis:
    name: "Redis"
    package_name: "redis"
    description: "In-memory data structure store"
    installer: "os"

  # Database - SQLite
  sqlite:
    name: "SQLite"
    package_name: "sqlite"
    description: "C library that implements a small, fast, self-contained SQL database engine"
    installer: "os"

  # Graphical Tools
  dbeaver:
    name: "DBeaver"
    package_name: "dbeaver"
    description: "Universal database tool and SQL client"
    installer: "os"

package_groups:
  - group_name: "common-dev-tools"
    group_description: "Essential development tools for all developers"
    required_installers: ["os"]
    packages:
      - "{{ packages.git }}"
      - "{{ packages.make }}"
      - "{{ packages.cmake }}"
      - "{{ packages.gcc }}"
      - "{{ packages.clang }}"
      - "{{ packages.llvm }}"
      - "{{ packages.pkg_config }}"
      - "{{ packages.vscodium }}"
      - "{{ packages.neovim }}"
      - "{{ packages.helix }}"

  - group_name: "language-servers"
    group_description: "Language Server Protocol servers for enhanced editor support"
    required_installers: ["os", "pip", "npm"]
    packages:
      - "{{ packages.clangd }}"
      - "{{ packages.rust_analyzer }}"
      - "{{ packages.gopls }}"
      - "{{ packages.python_lsp_server }}"
      - "{{ packages.typescript_language_server }}"

  - group_name: "linters"
    group_description: "Code linting and formatting tools"
    required_installers: ["pip", "npm"]
    packages:
      - "{{ packages.black }}"
      - "{{ packages.flake8 }}"
      - "{{ packages.mypy }}"
      - "{{ packages.eslint }}"
      - "{{ packages.prettier }}"

  - group_name: "container-podman"
    group_description: "Podman container toolkit (daemonless containers)"
    required_installers: ["os"]
    packages:
      - "{{ packages.podman }}"
      - "{{ packages.buildah }}"
      - "{{ packages.skopeo }}"

  - group_name: "container-docker"
    group_description: "Docker container platform"
    required_installers: ["os"]
    packages:
      - "{{ packages.docker }}"
      - "{{ packages.docker_compose }}"

  - group_name: "infrastructure-tools"
    group_description: "Infrastructure and cloud management tools"
    required_installers: ["os"]
    packages:
      - "{{ packages.kubectl }}"
      - "{{ packages.helm }}"
      - "{{ packages.terraform }}"

  - group_name: "python-dev"
    group_description: "Python development environment"
    required_installers: ["os", "pip"]
    packages:
      - "{{ packages.python3 }}"
      - "{{ packages.python_pip }}"
      - "{{ packages.python_venv }}"
      - "{{ packages.python_dev }}"
      - "{{ packages.pytest }}"
      - "{{ packages.dbeaver }}"

  - group_name: "go-dev"
    group_description: "Go development environment"
    required_installers: ["os"]
    packages:
      - "{{ packages.go }}"
      - "{{ packages.delve }}"
      - "{{ packages.dbeaver }}"

  - group_name: "rust-dev"
    group_description: "Rust development environment"
    required_installers: ["os", "cargo"]
    packages:
      - "{{ packages.rustup }}"
      - "{{ packages.cargo }}"
      - "{{ packages.dbeaver }}"

  - group_name: "nodejs-dev"
    group_description: "Node.js development environment"
    required_installers: ["os", "npm"]
    packages:
      - "{{ packages.nodejs }}"
      - "{{ packages.npm }}"
      - "{{ packages.dbeaver }}"

  - group_name: "postgresql"
    group_description: "PostgreSQL database server and tools"
    required_installers: ["os"]
    packages:
      - "{{ packages.postgresql }}"
      - "{{ packages.postgresql_client }}"
      - "{{ packages.dbeaver }}"

  - group_name: "redis"
    group_description: "Redis in-memory data store"
    required_installers: ["os"]
    packages:
      - "{{ packages.redis }}"

  - group_name: "sqlite"
    group_description: "SQLite embedded database"
    required_installers: ["os"]
    packages:
      - "{{ packages.sqlite }}"
      - "{{ packages.dbeaver }}"


