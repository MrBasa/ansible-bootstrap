# dev-environment.yml
# Check Ansible dependencies.
- name: "Include Ansible Dependencies"
  import_playbook: playbook-ansible-dependencies.yml

# Dev Tools Playbook
- name: "Bootstrap Linux Environment - Development Tools"
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    # Default: install only common tools, languages are opt-in
    languages: []
    databases: []
    ides: []
    
    # Version defaults
    python_version: "3.11"
    node_version: "20"
    go_version: "latest"
    rust_version: "stable"
    dotnet_version: "8.0"
    java_version: "latest"

    # Common development packages (always installed)
    common_dev_packages:
      - make
      - cmake
      - ninja
      - gcc
      - g++
      - clang
      - llvm
      - lldb
      - pkg-config
      - autoconf
      - automake
      - libtool
      - bear
      - shellcheck
      - shfmt
      - universal-ctags
      - global
      - codespell
      - jq
      - yq
      - htop
      - fzf
      - ripgrep
      - fd-find
      - bat
      - exa
      - dust
      - zoxide
      - micro
      - helix
      # TODO: Separate many of these.
      - docker
      - docker-compose
      - podman
      - buildah
      - skopeo
      - kubectl
      - helm
      - terraform
      - aws-cli
      - google-cloud-sdk

    # Language-specific packages
    python_packages:
      - python3
      - python3-pip
      - python3-venv
      - python3-dev
      - python3-setuptools
      - python3-wheel
      - python3-virtualenv
      - python3-pipx
      - python3-poetry
      - python3-pytest
      - python3-black
      - python3-flake8
      - python3-mypy
      - python3-pylint
      - python3-isort
      - python3-bandit
      - python3-safety
      - ipython3
      - jupyter
      - jupyterlab

    go_packages:
      - go
      - gopls
      - delve
      - golangci-lint

    nodejs_packages:
      - nodejs
      - npm
      - yarn
      - pnpm
      - typescript
      - ts-node
      - eslint
      - prettier
      - nodemon

    rust_packages:
      - rustup
      - cargo
      - rust-analyzer
      - clippy
      - rustfmt
      - cargo-watch

    java_packages:
      - jdk-openjdk
      - maven
      - gradle
      - groovy
      - kotlin
      - spring-boot-cli

    dotnet_packages:
      - dotnet-sdk
      - aspnetcore-runtime
      - dotnet-tools

    # Database packages (grouped by database)
    postgresql_packages:
      - postgresql
      - postgresql-libs
      - postgresql-client
      - libpq-dev
      - pgadmin4

    mysql_packages:
      - mysql
      - mysql-server
      - mysql-client
      - libmysqlclient-dev
      - mysql-workbench

    sqlite_packages:
      - sqlite
      - sqlite3
      - sqlitebrowser
      - sqlite-utils

    redis_packages:
      - redis
      - redis-server
      - redis-tools
      - redis-cli

    mongodb_packages:
      - mongodb
      - mongodb-server
      - mongosh
      - mongo-tools
      - mongodb-compass

    # IDE packages
    vscodium_packages:
      - vscodium

    neovim_packages:
      - neovim

    vim_packages:
      - vim
      - vim-gtk

    emacs_packages:
      - emacs
      - emacs-nox

    # AUR packages for Arch Linux
    arch_aur_packages:
      - visual-studio-code-bin
      - jetbrains-toolbox
      - insomnia-bin
      - postman-bin

  tasks:
    - name: "Display installation plan"
      debug:
        msg: |
          Languages to install: {{ languages | default('none') }}
          Databases to install: {{ databases | default('none') }}
          IDEs to install: {{ ides | default('none') }}

    # --- Common Development Tools ---
    - name: "Install common development tools"
      become: yes
      package:
        name: "{{ common_dev_packages }}"
        state: present

    # --- Language Installations ---
    - name: "Install Python development environment"
      when: "'python' in languages"
      block:
        - name: "Install Python packages"
          become: yes
          package:
            name: "{{ python_packages }}"
            state: present

        - name: "Install PyEnv for Python version management"
          become: yes
          become_user: "{{ ansible_user_id }}"
          shell:
            cmd: |
              curl https://pyenv.run | bash
            creates: "/home/{{ ansible_user_id }}/.pyenv/bin/pyenv"
          environment:
            HOME: "/home/{{ ansible_user_id }}"

        - name: "Configure PyEnv in shell"
          become: yes
          become_user: "{{ ansible_user_id }}"
          blockinfile:
            path: "/home/{{ ansible_user_id }}/.bashrc"
            block: |
              export PYENV_ROOT="$HOME/.pyenv"
              [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
              eval "$(pyenv init -)"
            marker: "# {mark} ANSIBLE MANAGED BLOCK - PyEnv"
          environment:
            HOME: "/home/{{ ansible_user_id }}"

    - name: "Install Go development environment"
      when: "'go' in languages"
      block:
        - name: "Install Go packages"
          become: yes
          package:
            name: "{{ go_packages }}"
            state: present

        - name: "Install popular Go tools"
          become: yes
          become_user: "{{ ansible_user_id }}"
          shell:
            cmd: |
              go install github.com/kyoh86/richgo@latest
              go install honnef.co/go/tools/cmd/staticcheck@latest
            environment:
              HOME: "/home/{{ ansible_user_id }}"
              PATH: "/home/{{ ansible_user_id }}/go/bin:{{ ansible_env.PATH }}"

    - name: "Install Node.js development environment"
      when: "'nodejs' in languages"
      block:
        - name: "Install Node.js packages"
          become: yes
          package:
            name: "{{ nodejs_packages }}"
            state: present

        - name: "Install Node Version Manager (nvm)"
          become: yes
          become_user: "{{ ansible_user_id }}"
          shell:
            cmd: |
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            creates: "/home/{{ ansible_user_id }}/.nvm/nvm.sh"
          environment:
            HOME: "/home/{{ ansible_user_id }}"

        - name: "Install global npm packages"
          become: yes
          become_user: "{{ ansible_user_id }}"
          shell:
            cmd: |
              . "/home/{{ ansible_user_id }}/.nvm/nvm.sh" && \
              npm install -g @vue/cli create-react-app @angular/cli expo-cli pm2
          environment:
            HOME: "/home/{{ ansible_user_id }}"

    - name: "Install Rust development environment"
      when: "'rust' in languages"
      block:
        - name: "Install Rust packages"
          become: yes
          package:
            name: "{{ rust_packages }}"
            state: present

        - name: "Install Rust toolchain"
          become: yes
          become_user: "{{ ansible_user_id }}"
          shell:
            cmd: |
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain {{ rust_version }}
            creates: "/home/{{ ansible_user_id }}/.cargo/bin/rustc"
          environment:
            HOME: "/home/{{ ansible_user_id }}"

        - name: "Configure Cargo in shell"
          become: yes
          become_user: "{{ ansible_user_id }}"
          lineinfile:
            path: "/home/{{ ansible_user_id }}/.bashrc"
            line: 'export PATH="$HOME/.cargo/bin:$PATH"'
            state: present
          environment:
            HOME: "/home/{{ ansible_user_id }}"

        - name: "Install popular Rust tools"
          become: yes
          become_user: "{{ ansible_user_id }}"
          shell:
            cmd: |
              . "/home/{{ ansible_user_id }}/.cargo/env" && \
              cargo install bat exa fd-find ripgrep tokei hyperfine starship zoxide bottom git-delta
            environment:
              HOME: "/home/{{ ansible_user_id }}"

    - name: "Install Java development environment"
      when: "'java' in languages"
      block:
        - name: "Install Java packages"
          become: yes
          package:
            name: "{{ java_packages }}"
            state: present

    - name: "Install .NET development environment"
      when: "'dotnet' in languages"
      block:
        - name: "Install .NET packages"
          become: yes
          package:
            name: "{{ dotnet_packages }}"
            state: present

    # --- Database Installations ---
    - name: "Install PostgreSQL"
      when: "'postgresql' in databases"
      become: yes
      package:
        name: "{{ postgresql_packages }}"
        state: present

    - name: "Install MySQL"
      when: "'mysql' in databases"
      become: yes
      package:
        name: "{{ mysql_packages }}"
        state: present

    - name: "Install SQLite"
      when: "'sqlite' in databases"
      become: yes
      package:
        name: "{{ sqlite_packages }}"
        state: present

    - name: "Install Redis"
      when: "'redis' in databases"
      become: yes
      package:
        name: "{{ redis_packages }}"
        state: present

    - name: "Install MongoDB"
      when: "'mongodb' in databases"
      become: yes
      package:
        name: "{{ mongodb_packages }}"
        state: present

    # --- IDE Installations ---
    - name: "Install VSCodium"
      when: "'vscodium' in ides"
      become: yes
      package:
        name: "{{ vscodium_packages }}"
        state: present

    - name: "Install Neovim"
      when: "'neovim' in ides"
      become: yes
      package:
        name: "{{ neovim_packages }}"
        state: present

    - name: "Install Vim"
      when: "'vim' in ides"
      become: yes
      package:
        name: "{{ vim_packages }}"
        state: present

    - name: "Install Emacs"
      when: "'emacs' in ides"
      become: yes
      package:
        name: "{{ emacs_packages }}"
        state: present

    - name: "Install AUR development packages (Arch Linux)"
      when: ansible_os_family == "Archlinux" and (ides | length > 0)
      become: yes
      become_user: aur_builder
      shell:
        cmd: "yay -S --noconfirm --needed {{ item }}"
      loop: "{{ arch_aur_packages }}"
      environment:
        HOME: "/home/aur_builder"

    # --- Development Workspace Setup ---
    - name: "Create development directories"
      become: yes
      become_user: "{{ ansible_user_id }}"
      file:
        path: "/home/{{ ansible_user_id }}/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - dev
        - dev/go
        - dev/rust
        - dev/python
        - dev/js
        - dev/dotnet
        - dev/docker
        - dev/databases
      environment:
        HOME: "/home/{{ ansible_user_id }}"

    - name: "Install VS Code extensions"
      when: "'vscodium' in ides"
      become: yes
      become_user: "{{ ansible_user_id }}"
      shell:
        cmd: "codium --install-extension {{ item }}"
      loop:
        - ms-python.python
        - golang.Go
        - rust-lang.rust-analyzer
        - ms-dotnettools.csharp
        - ms-vscode.vscode-typescript-next
        - bradlc.vscode-tailwindcss
        - eamodio.gitlens
        - ms-vscode.cpptools
        - ms-azuretools.vscode-docker
        - hashicorp.terraform
        - redhat.vscode-yaml
        - ms-vscode.makefile-tools
        - streetsidesoftware.code-spell-checker
      environment:
        HOME: "/home/{{ ansible_user_id }}"
      ignore_errors: yes

    - name: "Configure Git for development"
      become: yes
      become_user: "{{ ansible_user_id }}"
      git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: global
      loop:
        - { name: "user.name", value: "{{ ansible_user_id }}" }
        - { name: "user.email", value: "{{ ansible_user_id }}@localhost" }
        - { name: "init.defaultBranch", value: "main" }
        - { name: "pull.rebase", value: "false" }
        - { name: "core.editor", value: "micro" }
      environment:
        HOME: "/home/{{ ansible_user_id }}"
